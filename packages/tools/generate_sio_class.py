from packages.server.sim_app.sessionrouter import SimSessionRouter
import json
# get the location of this file
import os
from pathlib import Path
import re
this_file = Path(os.path.realpath(__file__))
this_dir = this_file.parent

schema = SimSessionRouter.get_sio_emits_schema()
print(schema)

with open(f"{this_dir}/sioevents.schema.json", "w") as f:
    json.dump(schema, f, indent=4)

exit()

prompt = """
Create an abstract typescript class which provides virtual functions for each element in SIOEvents, with a single paramater "data" of the associated type. Do not provide any surrounding text, provide only the code.

For example:
export interface SIOEvents {
  another_function: DummyType;
  another: null;
  test_function: Object;
}

You should generate the code:
import {DummyType} from "./sioevents";

export abstract class SIOEventProcessor {
  socket: Socket;
  abstract on_another_function(data: DummyType): void;
  abstract on_another(): void;
  abstract on_test_function(data: Object): void;

  constructor(socket: Socket) {
    this.socket = socket;
    this.socket.on("another_function", (data: DummyType) => this.on_another_function(data));
    this.socket.on("another", () => this.on_another());
    this.socket.on("test_function", (data: Object) => this.on_test_function(data));
  }
}

Generate the code for the following SIOEvents object:

<SCHEMA>
"""

ts_file_path = f"{this_dir}/sioevents.d.ts"

with open(ts_file_path, "r") as f:
    ts_file_contents = f.read()

# Regular expression to extract the SIOEvents interface content
pattern = re.compile(r'(export interface SIOEvents \{.*?\})', re.DOTALL)


# Search for the pattern
match = pattern.search(ts_file_contents)

if not match:
    raise Exception("Could not find SIOEvents interface in sioevents.d.ts")
    
sio_events_content = match.group(1)

formatted_prompt = prompt.replace("<SCHEMA>", sio_events_content)

print(formatted_prompt)

from packages.server.gpt.gpt_api import gpt, MODEL_GPT35, GPTMessage, Role

output_folder = "packages/frontend/src/sioevents"

async def main():
    response = await gpt([GPTMessage(role=Role.USER, content=formatted_prompt)], model=MODEL_GPT35)
    print(response)

    output_text = """
/* eslint-disable */
/**
 * This file was automatically generated by packages/tools/generate_sio_class.py
 * GPT made this, so godspeed and good luck.
 */

import { Socket } from "socket.io";
<CLASS>
""".strip().replace("<CLASS>", response)

    output_file_path = f"{output_folder}/SIOEventProcessor.ts"
    with open(output_file_path, "w") as f:
        f.write(output_text)
    with open(f"{output_folder}/sioevents.d.ts", "w") as f:
        f.write(ts_file_contents)

import asyncio
asyncio.run(main())