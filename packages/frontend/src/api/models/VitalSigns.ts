/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BloodPressureModel } from './BloodPressureModel';
import {
    BloodPressureModelFromJSON,
    BloodPressureModelFromJSONTyped,
    BloodPressureModelToJSON,
} from './BloodPressureModel';

/**
 * 
 * @export
 * @interface VitalSigns
 */
export interface VitalSigns {
    /**
     * The body temperature in degrees Celsius or Fahrenheit
     * @type {number}
     * @memberof VitalSigns
     */
    temperature: number;
    /**
     * The heart rate in beats per minute
     * @type {number}
     * @memberof VitalSigns
     */
    heartRate: number;
    /**
     * The number of breaths taken per minute
     * @type {number}
     * @memberof VitalSigns
     */
    respiratoryRate: number;
    /**
     * 
     * @type {BloodPressureModel}
     * @memberof VitalSigns
     */
    bloodPressure: BloodPressureModel;
    /**
     * The blood glucose level
     * @type {number}
     * @memberof VitalSigns
     */
    bloodGlucose: number;
    /**
     * The oxygen saturation in percentage
     * @type {number}
     * @memberof VitalSigns
     */
    oxygenSaturation: number;
    /**
     * The capillary refill time in seconds
     * @type {number}
     * @memberof VitalSigns
     */
    capillaryRefill: number;
}

/**
 * Check if a given object implements the VitalSigns interface.
 */
export function instanceOfVitalSigns(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "temperature" in value;
    isInstance = isInstance && "heartRate" in value;
    isInstance = isInstance && "respiratoryRate" in value;
    isInstance = isInstance && "bloodPressure" in value;
    isInstance = isInstance && "bloodGlucose" in value;
    isInstance = isInstance && "oxygenSaturation" in value;
    isInstance = isInstance && "capillaryRefill" in value;

    return isInstance;
}

export function VitalSignsFromJSON(json: any): VitalSigns {
    return VitalSignsFromJSONTyped(json, false);
}

export function VitalSignsFromJSONTyped(json: any, ignoreDiscriminator: boolean): VitalSigns {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'temperature': json['temperature'],
        'heartRate': json['heart_rate'],
        'respiratoryRate': json['respiratory_rate'],
        'bloodPressure': BloodPressureModelFromJSON(json['blood_pressure']),
        'bloodGlucose': json['blood_glucose'],
        'oxygenSaturation': json['oxygen_saturation'],
        'capillaryRefill': json['capillary_refill'],
    };
}

export function VitalSignsToJSON(value?: VitalSigns | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'temperature': value.temperature,
        'heart_rate': value.heartRate,
        'respiratory_rate': value.respiratoryRate,
        'blood_pressure': BloodPressureModelToJSON(value.bloodPressure),
        'blood_glucose': value.bloodGlucose,
        'oxygen_saturation': value.oxygenSaturation,
        'capillary_refill': value.capillaryRefill,
    };
}

