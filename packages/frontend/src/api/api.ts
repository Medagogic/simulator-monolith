/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface SessionData
 */
export interface SessionData {
    /**
     * 
     * @type {string}
     * @memberof SessionData
     */
    'session_id': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof SessionData
     */
    'sids_in_session': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof SessionData
     */
    'creation_datetime'?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Handle Create Session
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleCreateSessionSessionNewPost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/session/new`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Handle List Sessions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleListSessionsSessionListGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/session/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Handle Test
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleTestSessionsSessionIdChatTestGetGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sessions/<session_id>/chat/test-get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Index
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Save Api Json
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveApiJsonSaveDocsPost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/save_docs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Handle Create Session
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async handleCreateSessionSessionNewPost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.handleCreateSessionSessionNewPost(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Handle List Sessions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async handleListSessionsSessionListGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SessionData>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.handleListSessionsSessionListGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Handle Test
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async handleTestSessionsSessionIdChatTestGetGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.handleTestSessionsSessionIdChatTestGetGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Index
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async indexGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.indexGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Save Api Json
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveApiJsonSaveDocsPost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saveApiJsonSaveDocsPost(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Handle Create Session
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleCreateSessionSessionNewPost(options?: any): AxiosPromise<void> {
            return localVarFp.handleCreateSessionSessionNewPost(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Handle List Sessions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleListSessionsSessionListGet(options?: any): AxiosPromise<Array<SessionData>> {
            return localVarFp.handleListSessionsSessionListGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Handle Test
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleTestSessionsSessionIdChatTestGetGet(options?: any): AxiosPromise<void> {
            return localVarFp.handleTestSessionsSessionIdChatTestGetGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Index
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexGet(options?: any): AxiosPromise<void> {
            return localVarFp.indexGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Save Api Json
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveApiJsonSaveDocsPost(options?: any): AxiosPromise<void> {
            return localVarFp.saveApiJsonSaveDocsPost(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Handle Create Session
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public handleCreateSessionSessionNewPost(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).handleCreateSessionSessionNewPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Handle List Sessions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public handleListSessionsSessionListGet(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).handleListSessionsSessionListGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Handle Test
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public handleTestSessionsSessionIdChatTestGetGet(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).handleTestSessionsSessionIdChatTestGetGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Index
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public indexGet(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).indexGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Save Api Json
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public saveApiJsonSaveDocsPost(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).saveApiJsonSaveDocsPost(options).then((request) => request(this.axios, this.basePath));
    }
}



